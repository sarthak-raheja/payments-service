// Code generated by MockGen. DO NOT EDIT.
// Source: internal/settlement/settlement_router/router.go

// Package mock_settlement_router is a generated GoMock package.
package mock_settlement_router

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sarthakraheja/payments-service/internal/model"
	settlement_factory "github.com/sarthakraheja/payments-service/internal/settlement/settlement_factory"
)

// MockAcquiringBankRouter is a mock of AcquiringBankRouter interface.
type MockAcquiringBankRouter struct {
	ctrl     *gomock.Controller
	recorder *MockAcquiringBankRouterMockRecorder
}

// MockAcquiringBankRouterMockRecorder is the mock recorder for MockAcquiringBankRouter.
type MockAcquiringBankRouterMockRecorder struct {
	mock *MockAcquiringBankRouter
}

// NewMockAcquiringBankRouter creates a new mock instance.
func NewMockAcquiringBankRouter(ctrl *gomock.Controller) *MockAcquiringBankRouter {
	mock := &MockAcquiringBankRouter{ctrl: ctrl}
	mock.recorder = &MockAcquiringBankRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcquiringBankRouter) EXPECT() *MockAcquiringBankRouterMockRecorder {
	return m.recorder
}

// GetAcquiringBank mocks base method.
func (m *MockAcquiringBankRouter) GetAcquiringBank(arg0 *model.Payment) (settlement_factory.AcquringBank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcquiringBank", arg0)
	ret0, _ := ret[0].(settlement_factory.AcquringBank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcquiringBank indicates an expected call of GetAcquiringBank.
func (mr *MockAcquiringBankRouterMockRecorder) GetAcquiringBank(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcquiringBank", reflect.TypeOf((*MockAcquiringBankRouter)(nil).GetAcquiringBank), arg0)
}
