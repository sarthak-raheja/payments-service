syntax="proto3";

package protos;

option go_package="github.com/sarthakraheja/bank-simulator/protos";

// The acquring bank service definition.
service AcquiringBankService {
  rpc CapturePayment (CapturePaymentRequest) returns (CapturePaymentResponse) {}
  rpc AuthorisePayment(AuthorisePaymentRequest) returns (AuthorisePaymentResponse) {}
}

enum CreditCardType{
    CreditCardType_UNSPECIFIED=0;
    CreditCardType_AMEX=1;
    CreditCardType_VISA=2;
    CreditCardType_MASTERCARD=3;
}

message PaymentMethodCreditCardDetails{
    string card_holder_name=1;
    string credit_card_number=2;
    string expiry_date=3;
    string cvv=4;
    CreditCardType credit_card_type=5;
}

enum PaymentMethodType{
    PaymentMethodType_UNSPECIFIED=0;
    PaymentMethodType_CREDITCARD=1;
}

enum PaymentStatus{
    PaymentStatus_UNSPECIFIED=0;
    PaymentStatus_CREATED=1;
    PaymentStatus_PROCESSING=2;
    PaymentStatus_PROCESSED=3;
    PaymentStatus_COMPLETED=4;
    PaymentStatus_FAILED=5;
}

message PaymentMethod{
    PaymentMethodType payment_method_type=1;
    oneof payment_methods_details{
        PaymentMethodCreditCardDetails payment_method_credit_card_details=2; 
    }    
}

// The request message containing the user's name.
message CapturePaymentRequest {
    string idempotency_key = 1;
    string amount=2;
    string currency=3;
    string marchant_id=4;
    PaymentMethod payment_method=5;
}


// The response message containing the greetings
message CapturePaymentResponse {
    string id=1;
    string status=2;
}

// The request message containing the user's name.
message AuthorisePaymentRequest {
    string idempotency_key = 1;
    string amount=2;
    string currency=3;
    string marchant_id=4;
    PaymentMethod payment_method=5;
}


// The response message containing the greetings
message AuthorisePaymentResponse {
    string id=1;
    string status=2;
}

