// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/v1/bank_simulator.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AcquiringBankServiceClient is the client API for AcquiringBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcquiringBankServiceClient interface {
	CapturePayment(ctx context.Context, in *CapturePaymentRequest, opts ...grpc.CallOption) (*CapturePaymentResponse, error)
	AuthorisePayment(ctx context.Context, in *AuthorisePaymentRequest, opts ...grpc.CallOption) (*AuthorisePaymentResponse, error)
}

type acquiringBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAcquiringBankServiceClient(cc grpc.ClientConnInterface) AcquiringBankServiceClient {
	return &acquiringBankServiceClient{cc}
}

func (c *acquiringBankServiceClient) CapturePayment(ctx context.Context, in *CapturePaymentRequest, opts ...grpc.CallOption) (*CapturePaymentResponse, error) {
	out := new(CapturePaymentResponse)
	err := c.cc.Invoke(ctx, "/protos.AcquiringBankService/CapturePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acquiringBankServiceClient) AuthorisePayment(ctx context.Context, in *AuthorisePaymentRequest, opts ...grpc.CallOption) (*AuthorisePaymentResponse, error) {
	out := new(AuthorisePaymentResponse)
	err := c.cc.Invoke(ctx, "/protos.AcquiringBankService/AuthorisePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcquiringBankServiceServer is the server API for AcquiringBankService service.
// All implementations must embed UnimplementedAcquiringBankServiceServer
// for forward compatibility
type AcquiringBankServiceServer interface {
	CapturePayment(context.Context, *CapturePaymentRequest) (*CapturePaymentResponse, error)
	AuthorisePayment(context.Context, *AuthorisePaymentRequest) (*AuthorisePaymentResponse, error)
	mustEmbedUnimplementedAcquiringBankServiceServer()
}

// UnimplementedAcquiringBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAcquiringBankServiceServer struct {
}

func (UnimplementedAcquiringBankServiceServer) CapturePayment(context.Context, *CapturePaymentRequest) (*CapturePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapturePayment not implemented")
}
func (UnimplementedAcquiringBankServiceServer) AuthorisePayment(context.Context, *AuthorisePaymentRequest) (*AuthorisePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorisePayment not implemented")
}
func (UnimplementedAcquiringBankServiceServer) mustEmbedUnimplementedAcquiringBankServiceServer() {}

// UnsafeAcquiringBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcquiringBankServiceServer will
// result in compilation errors.
type UnsafeAcquiringBankServiceServer interface {
	mustEmbedUnimplementedAcquiringBankServiceServer()
}

func RegisterAcquiringBankServiceServer(s grpc.ServiceRegistrar, srv AcquiringBankServiceServer) {
	s.RegisterService(&AcquiringBankService_ServiceDesc, srv)
}

func _AcquiringBankService_CapturePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapturePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquiringBankServiceServer).CapturePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AcquiringBankService/CapturePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquiringBankServiceServer).CapturePayment(ctx, req.(*CapturePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcquiringBankService_AuthorisePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorisePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcquiringBankServiceServer).AuthorisePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.AcquiringBankService/AuthorisePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcquiringBankServiceServer).AuthorisePayment(ctx, req.(*AuthorisePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AcquiringBankService_ServiceDesc is the grpc.ServiceDesc for AcquiringBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcquiringBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.AcquiringBankService",
	HandlerType: (*AcquiringBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CapturePayment",
			Handler:    _AcquiringBankService_CapturePayment_Handler,
		},
		{
			MethodName: "AuthorisePayment",
			Handler:    _AcquiringBankService_AuthorisePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1/bank_simulator.proto",
}
